apply plugin: 'java'

def getCheckedOutGitCommitHash() {
    def gitFolder = "$rootDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def commit_id = getCheckedOutGitCommitHash()


group = pluginGroup
version = pluginVersion + "#${commit_id}"
archivesBaseName = pluginBuildName

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        url "https://hub.spigotmc.org/nexus/content/groups/public/"
    }
    maven {
        url "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url "http://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        url "http://mc.hackerzlair.org:8888/repository/public"
    }
    maven {
        url "https://git.souep.cn/nexus/repository/maven-public/"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

configurations.all {
    transitive = false
}

dependencies {
    shade project(path: ':Common', configuration: 'default')
    implementation group: 'com.github.skystardust', name: 'UltraCore-Bukkit', version: '4.2-SNAPSHOT'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    compile fileTree(dir: "libs", includes: ["*.jar"])
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
            exclude 'dummyThing'
        }
    }
}

build {
    doLast {
        copy {
            from jar.archivePath
            into new File(rootProject.buildDir, "libs")
        }
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
