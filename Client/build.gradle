buildscript {
    repositories {
        maven {
            name = "jcenter"
            url = "https://jcenter.bintray.com"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'com.github.johnrengelman.shadow'


def getCheckedOutGitCommitHash() {
    def gitFolder = "$rootDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def commit_id = getCheckedOutGitCommitHash()


version = modVersion + "#" + commit_id
group = modGroup
archivesBaseName = modBaseName

compileJava.options.encoding = 'UTF-8'

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}
configurations.all {
    transitive = false
}

configurations {
    shadow
    compile.extendsFrom shadow
}

repositories {
    mavenCentral()
}

dependencies {
    shadow project(path: ':Common', configuration: 'default')
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    shadow group: 'net.objecthunter', name: 'exp4j', version: '0.4.8'

}

shadowJar {
    relocate 'net.objecthunter.exp4j', 'com.github.timmyovo.pixeluitweaks.common.math'
    classifier ''
    dependencies {
        exclude(dependency(group: 'org.projectlombok', name: 'lombok', version: '1.18.8'))
        exclude(dependency(group: 'com.google.code.gson', name: 'gson', version: '2.8.5'))
    }
}


reobf {
    shadowJar { mappingType = 'SEARGE' }
}

tasks.build.dependsOn reobfShadowJar

artifacts {
    archives shadowJar
}

build {

    doLast {
        exec {
            def input_jar = jar.archivePath
            workingDir './'
            commandLine 'java', "-jar", "./obf/obf.jar", "--config", "./obf/obf.jocfg", "--jarIn", "${input_jar}", "--jarOut", "./build/libs//${jar.archiveName}_OBF.jar"

            //store the output instead of printing to the console:
            standardOutput = new ByteArrayOutputStream()

            //extension method execSomething.output() can be used to obtain the output:
            ext.output = {
                return standardOutput.toString()
            }
        }
        for (File f : new File(project.buildDir, "libs").listFiles()) {
            if (f != null) {
                if (!f.getName().contains("OBF")) {
                    f.delete()
                } else {
                    f.renameTo(jar.archivePath)
                }
            }
        }

        copy {
            from jar.archivePath
            into new File(rootProject.buildDir, "libs")
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}


